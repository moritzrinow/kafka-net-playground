version: "3"

networks:
    kafka:
        driver: bridge
        name: kafka

services:
    zookeeper:
        container_name: zookeeper
        image: bitnami/zookeeper:latest
        volumes:
            - C:\Development\Data\zookeeper:/bitnami/zookeeper
        networks:
            - kafka
        ports:
            - "2181:2181"
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        restart: always
    
    kafka:
        container_name: kafka
        hostname: kafka
        image: bitnami/kafka:latest
        volumes:
            - C:\Development\Data\kafka:/bitnami/kafka
        networks:
            - kafka
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
            - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
            - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
            - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
        restart: always
        depends_on:
            - zookeeper
            
    kafdrop:
        container_name: kafdrop
        hostname: kafdrop
        image: obsidiandynamics/kafdrop
        networks:
            - kafka
        ports:
            - "9000:9000"
        environment:
            - KAFKA_BROKERCONNECT=kafka:9093
            - JVM_OPTS=-Xms32M -Xmx64M
            - SERVER_SERVLET_CONTEXTPATH=/
        restart: always
        depends_on:
            - kafka
            
            
    # Uncomment block to run producer and consumer as docker containers within the kafka network
    
    #producer:
    #    container_name: producer
    #    hostname: producer
    #    image: kafka-net/producer
    #    build:
    #        context: Kafka.Producer
    #        dockerfile: Dockerfile
    #    networks:
    #        - kafka
    #    depends_on:
    #        - kafka
    
    #consumer:
    #    container_name: consumer
    #    hostname: consumer
    #    image: kafka-net/consumer
    #    build:
    #        context: Kafka.Consumer
    #        dockerfile: Dockerfile
    #    networks:
    #        - kafka
    #    depends_on:
    #        - kafka